// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package linear

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// IssueIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An issue.
type IssueIssue struct {
	// The unique identifier of the entity.
	Id string `json:"id"`
	// The time at which the entity was created.
	CreatedAt time.Time `json:"createdAt"`
	// The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
	// for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
	// been updated after creation.
	UpdatedAt time.Time `json:"updatedAt"`
	// The time at which the entity was archived. Null if the entity has not been archived.
	ArchivedAt time.Time `json:"archivedAt"`
	// The issue's unique number.
	Number float64 `json:"number"`
	// The issue's title.
	Title string `json:"title"`
	// The issue's description in markdown format.
	Description string `json:"description"`
	// The priority of the issue.
	Priority float64 `json:"priority"`
	// The estimate of the complexity of the issue..
	Estimate float64 `json:"estimate"`
	// The order of the item in its column on the board.
	BoardOrder float64 `json:"boardOrder"`
	// The order of the item in relation to other items in the organization.
	SortOrder float64 `json:"sortOrder"`
	// The time at which the issue was moved into started state.
	StartedAt time.Time `json:"startedAt"`
	// The time at which the issue was moved into completed state.
	CompletedAt time.Time `json:"completedAt"`
	// The time at which the issue entered triage.
	StartedTriageAt time.Time `json:"startedTriageAt"`
	// The time at which the issue left triage.
	TriagedAt time.Time `json:"triagedAt"`
	// The time at which the issue was moved into canceled state.
	CanceledAt time.Time `json:"canceledAt"`
	// The time at which the issue was automatically closed by the auto pruning process.
	AutoClosedAt time.Time `json:"autoClosedAt"`
	// The time at which the issue was automatically archived by the auto pruning process.
	AutoArchivedAt time.Time `json:"autoArchivedAt"`
	// The date at which the issue is due.
	DueDate time.Time `json:"dueDate"`
	// [Internal] The time at which the issue's SLA began.
	SlaStartedAt time.Time `json:"slaStartedAt"`
	// [Internal] The time at which the issue's SLA will breach.
	SlaBreachesAt time.Time `json:"slaBreachesAt"`
	// A flag that indicates whether the issue is in the trash bin.
	Trashed bool `json:"trashed"`
	// The time until an issue will be snoozed in Triage view.
	SnoozedUntilAt time.Time `json:"snoozedUntilAt"`
	// The order of the item in the sub-issue list. Only set if the issue has a parent.
	SubIssueSortOrder float64 `json:"subIssueSortOrder"`
	// Label for the priority.
	PriorityLabel string `json:"priorityLabel"`
	// [Internal] The issue's description as a Prosemirror document.
	DescriptionData json.RawMessage `json:"descriptionData"`
	// Issue's human readable identifier (e.g. ENG-123).
	Identifier string `json:"identifier"`
	// Issue URL.
	Url string `json:"url"`
	// Suggested branch name for the issue.
	BranchName string `json:"branchName"`
	// Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
	CustomerTicketCount int `json:"customerTicketCount"`
}

// GetId returns IssueIssue.Id, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetId() string { return v.Id }

// GetCreatedAt returns IssueIssue.CreatedAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns IssueIssue.UpdatedAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetArchivedAt returns IssueIssue.ArchivedAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetArchivedAt() time.Time { return v.ArchivedAt }

// GetNumber returns IssueIssue.Number, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetNumber() float64 { return v.Number }

// GetTitle returns IssueIssue.Title, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetTitle() string { return v.Title }

// GetDescription returns IssueIssue.Description, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetDescription() string { return v.Description }

// GetPriority returns IssueIssue.Priority, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetPriority() float64 { return v.Priority }

// GetEstimate returns IssueIssue.Estimate, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetEstimate() float64 { return v.Estimate }

// GetBoardOrder returns IssueIssue.BoardOrder, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetBoardOrder() float64 { return v.BoardOrder }

// GetSortOrder returns IssueIssue.SortOrder, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetSortOrder() float64 { return v.SortOrder }

// GetStartedAt returns IssueIssue.StartedAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetStartedAt() time.Time { return v.StartedAt }

// GetCompletedAt returns IssueIssue.CompletedAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetCompletedAt() time.Time { return v.CompletedAt }

// GetStartedTriageAt returns IssueIssue.StartedTriageAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetStartedTriageAt() time.Time { return v.StartedTriageAt }

// GetTriagedAt returns IssueIssue.TriagedAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetTriagedAt() time.Time { return v.TriagedAt }

// GetCanceledAt returns IssueIssue.CanceledAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetCanceledAt() time.Time { return v.CanceledAt }

// GetAutoClosedAt returns IssueIssue.AutoClosedAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetAutoClosedAt() time.Time { return v.AutoClosedAt }

// GetAutoArchivedAt returns IssueIssue.AutoArchivedAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetAutoArchivedAt() time.Time { return v.AutoArchivedAt }

// GetDueDate returns IssueIssue.DueDate, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetDueDate() time.Time { return v.DueDate }

// GetSlaStartedAt returns IssueIssue.SlaStartedAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetSlaStartedAt() time.Time { return v.SlaStartedAt }

// GetSlaBreachesAt returns IssueIssue.SlaBreachesAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetSlaBreachesAt() time.Time { return v.SlaBreachesAt }

// GetTrashed returns IssueIssue.Trashed, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetTrashed() bool { return v.Trashed }

// GetSnoozedUntilAt returns IssueIssue.SnoozedUntilAt, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetSnoozedUntilAt() time.Time { return v.SnoozedUntilAt }

// GetSubIssueSortOrder returns IssueIssue.SubIssueSortOrder, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetSubIssueSortOrder() float64 { return v.SubIssueSortOrder }

// GetPriorityLabel returns IssueIssue.PriorityLabel, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetPriorityLabel() string { return v.PriorityLabel }

// GetDescriptionData returns IssueIssue.DescriptionData, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetDescriptionData() json.RawMessage { return v.DescriptionData }

// GetIdentifier returns IssueIssue.Identifier, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetIdentifier() string { return v.Identifier }

// GetUrl returns IssueIssue.Url, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetUrl() string { return v.Url }

// GetBranchName returns IssueIssue.BranchName, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetBranchName() string { return v.BranchName }

// GetCustomerTicketCount returns IssueIssue.CustomerTicketCount, and is useful for accessing the field via an interface.
func (v *IssueIssue) GetCustomerTicketCount() int { return v.CustomerTicketCount }

// IssueResponse is returned by Issue on success.
type IssueResponse struct {
	// One specific issue.
	Issue IssueIssue `json:"issue"`
}

// GetIssue returns IssueResponse.Issue, and is useful for accessing the field via an interface.
func (v *IssueResponse) GetIssue() IssueIssue { return v.Issue }

// __IssueInput is used internally by genqlient
type __IssueInput struct {
	IssueId string `json:"issueId"`
}

// GetIssueId returns __IssueInput.IssueId, and is useful for accessing the field via an interface.
func (v *__IssueInput) GetIssueId() string { return v.IssueId }

func Issue(
	ctx context.Context,
	client graphql.Client,
	issueId string,
) (*IssueResponse, error) {
	req := &graphql.Request{
		OpName: "Issue",
		Query: `
query Issue ($issueId: String!) {
	issue(id: $issueId) {
		id
		createdAt
		updatedAt
		archivedAt
		number
		title
		description
		priority
		estimate
		boardOrder
		sortOrder
		startedAt
		completedAt
		startedTriageAt
		triagedAt
		canceledAt
		autoClosedAt
		autoArchivedAt
		dueDate
		slaStartedAt
		slaBreachesAt
		trashed
		snoozedUntilAt
		subIssueSortOrder
		priorityLabel
		descriptionData
		identifier
		url
		branchName
		customerTicketCount
	}
}
`,
		Variables: &__IssueInput{
			IssueId: issueId,
		},
	}
	var err error

	var data IssueResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
